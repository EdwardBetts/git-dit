#!/usr/bin/env bash
#
#   git-dit - the distributed issue tracker for git
#   Copyright (C) 2016 Matthias Beyer <mail@beyermatthias.de>
#   Copyright (C) 2016 Julian Ganz <neither@nut.email>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License version 2 as
#   published by the Free Software Foundation.
#
# -----
#
# $(basename $0) [options]
#
# (c) 2016 Matthias Beyer, Julian Ganz

abort() {
    echo "$*" >&2
    exit 1
}

SUBDIRECTORY_OK=1
USAGE="[options] <remote> [issue...]"
LONG_USAGE="    Options:
        -h          Display this message
        -k          also fetch known issues (those which visible through git dit
                    list)
        -p          Prune (as with git fetch)

Fetch issues.

Fetches the issues supplied on the command line. If none is supplied, fetches
all issues, unless the -l option is supplied."

. "$(git --exec-path)/git-sh-setup"


FETCH_KNOWN=0
FETCH_ARGS=()

while getopts "hk" opt
do
  case $opt in

    h)
        usage
        exit 0
        ;;

    k)
        FETCH_KNOWN=1
        ;;

    p)
        FETCH_ARGS+=("-p")
        ;;

    *)
        echo -e "\n  Option does not exist : $OPTARG\n"
        usage
        exit 1
        ;;

  esac
done
shift $(($OPTIND-1))

REMOTE="$1"
shift

ISSUES=("$@")

[[ -z "$REMOTE" ]] && die "No remote supplied"

if [[ "$FETCH_KNOWN" -eq 1 ]]; then
    ISSUES+=($(git dit get-issue-tree-init-hashes))
fi


if [[ "${#ISSUES[@]}" -eq 0 ]]; then
    # fetch all issues from the remote
    exec git fetch "${FETCH_ARGS[@]}" "$REMOTE" \
        "+refs/dit/*:refs/remotes/git-foo/dit/*"
else
    # fetch selected issues from the remote
    REFSPECS=()
    for issue in "${ISSUES[@]}"; do
        # TODO: dereference (symbolic) refs to hashes
        REFSPECS+=("+refs/dit/$issue/*:refs/remotes/git-foo/dit/$issue/*")
    done
    exec git fetch "${FETCH_ARGS[@]}" "$REMOTE" "${REFSPECS[@]}"
fi

