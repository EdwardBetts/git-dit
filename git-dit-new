#!/usr/bin/env bash
#
#   git-dit - the distributed issue tracker for git
#   Copyright (C) 2016 Matthias Beyer <mail@beyermatthias.de>
#   Copyright (C) 2016 Julian Ganz <neither@nut.email>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License version 2 as
#   published by the Free Software Foundation.
#
# -----
#
# The following script can be used to create a new bug report
#
#

. "$(git --exec-path)/git-sh-setup"

abort() {
    echo "$*" >&2
    exit 1
}

usage() {
    cat <<EOS
    Usage :  $(basename $0) [options] [--]

    Options:
        -h          Display this message
        -q          Be quiet
        -m <msg>    Use this as issue message
        -s          Add a 'Signed-off-by' line
        -S          Sign the issue with GPG (unimplemented)
        -t          Use a temporary file instead of .git/COMMIT_EDITMSG
        -M <data>   Add metadata. Can be passed multiple times.
                    Metadata is added and removed via key-value pairs.
                    Available Keys are:

                        status=<value>
                        priority=<value>
                        severity=<value>
                        assignee=<value>

                    where <value> is the desired new value to set.
                    Passing an empty value leaves the metadata empty.

    Issue messages will be piped through 'git stripspace'.

    (C) 2016 Matthias Beyer, Julian Ganz
    Released under the terms of the GNU GPLv2
EOS
}

QUIET=0
SIGNOFF=0
GPGSIGN=0
USE_TEMPFILE=0
MESSAGE=""
METADATA=""

while getopts "hm:sStM:" opt
do
  case $opt in

    h)
        usage
        exit 0
        ;;

    q)
        QUIET=1
        ;;

    m)
        MESSAGE="$OPTARG"
        ;;

    s)
        SIGNOFF=1
        ;;

    S)
        GPGSIGN=1
        ;;

    t)
        USE_TEMPFILE=1
        ;;

    M)
        METADATA+=" $OPTARG"
        ;;

    *)
        echo -e "\n  Option does not exist : $OPTARG\n"
        usage
        exit 1
        ;;

  esac
done
shift $(($OPTIND-1))

TMPFILE="$GIT_DIR/COMMIT_EDITMSG"
if [[ $USE_TEMPFILE -eq 1 ]]; then
    TMPFILE="$(mktemp)"
fi

# TODO: CHECK metadata

if [[ -z "$MESSAGE" ]]; then
    DIT_PREPARE_META_INPLACE="$TMPFILE" git dit prepare-metadata $METADATA
    $EDITOR $TMPFILE
else
    echo "$MESSAGE" | git dit prepare-metadata $METADATA >> $TMPFILE
fi

signoff_line() {
    echo "Signed-off-by: $(git config user.name) <$(git config user.email)>"
}

if [[ $SIGNOFF -eq 1 ]]; then
    cat >> $TMPFILE <<EOF


$(signoff_line)
EOF
fi

cat "$TMPFILE" | git dit check-message || \
    die "The format of the provided message is faulty"

new_hash=$(cat "$TMPFILE" | git stripspace -u | git dit create-message)

[[ $QUIET -eq 0 ]] && echo "[dit][new]: $new_hash"

rm "$TMPFILE"

