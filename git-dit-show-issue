#!/usr/bin/env bash
#
#   git-dit - the distributed issue tracker for git
#   Copyright (C) 2016 Matthias Beyer <mail@beyermatthias.de>
#   Copyright (C) 2016 Julian Ganz <neither@nut.email>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License version 2 as
#   published by the Free Software Foundation.
#
# -----
#
# $(basename $0)
#
#
# (c) 2016 Matthias Beyer, Julian Ganz

abort() {
    echo "$*" >&2
    exit 1
}

usage() {
    cat <<EOS
    Usage :  $(basename $0) [options] [--] [issue hash]

    Options:
        -h          Display this message
        -I          Only list the initial message
        -g          List messages as a tree (unimplemented)
        -V          Verify GPG signatures (if any, unimplemented)
        -d          Decorate (show references)
        -F <fmt>    Alternative format (see git-log(1))

    This uses 'git log' to print the issues

    (C) 2016 Matthias Beyer, Julian Ganz
    Released under the terms of the GNU GPLv2
EOS
}

INITONLY=0
LISTTREE=0
GPGVERIF=0
DECORATE=0

FORMAT="%Cgreen%H%Creset%n"
FORMAT+="%C(yellow)Author:    %an <%ae> (%ai)%Creset%n"
FORMAT+="%C(yellow)Committed: %cn <%ce> (%ci)%Creset%n"
FORMAT+="%n%s%n%n%b%n"

while getopts "hIgVF:d" opt
do
  case $opt in

    h)
        usage
        exit 0
        ;;

    I)
        INITONLY=1
        ;;

    g)
        LISTTREE=1
        ;;

    V)
        GPGVERIF=1
        ;;

    F)
        FORMAT="$OPTARG"
        ;;

    d)
        DECORATE=1
        ;;

    *)
        echo -e "\n  Option does not exist : $OPTARG\n"
        usage
        exit 1
        ;;

  esac
done
shift $(($OPTIND-1))

if [[ $INITONLY -eq 1 ]]; then
    hash=$(git dit find-tree-init-hash "$1")
    git show "$hash"
else
    HASHES=""
    for hash in $(git for-each-ref --contains "$1" | cut -d " " -f 1); do
        HASHES="$HASHES $hash"
    done

    args=""
    [[ $LISTTREE -eq 1 ]] && args="$args --graph "
    [[ $GPGVERIF -eq 1 ]] && args="$args --show-signature "
    [[ $DECORATE -eq 1 ]] && args="$args --decorate "

    git log $args --topo-order --first-parent --format=format:"$FORMAT" $HASHES
fi
