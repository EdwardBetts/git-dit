#!/usr/bin/env bash
#
#   git-dit - the distributed issue tracker for git
#   Copyright (C) 2016 Matthias Beyer <mail@beyermatthias.de>
#   Copyright (C) 2016 Julian Ganz <neither@nut.email>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License version 2 as
#   published by the Free Software Foundation.
#
# -----
#
# Show issues by printing them to stdout.
#
# $(basename $0) <parent-hash> <tree-init-hash>
#
# (c) 2016 Matthias Beyer, Julian Ganz

SUBDIRECTORY_OK=1
USAGE="<parent-hash> <tree-init-hash>"
LONG_USAGE="    Options:
    -h          Display this message
    -a          Abbreviate commit hashes
    -I          Only list the initial message
    -g          List messages as a tree (unimplemented)
    -t          Show message tree (only subjects, turns of -V, -d, -g, -I)
    -V          Verify GPG signatures (if any, unimplemented)
    -d          Decorate (show references)
    -F <fmt>    Alternative format (see git-log(1))

This uses 'git log' to print the issues."

. "$(git --exec-path)/git-sh-setup"

#
# IN: commit hash or symbolic ref
# OUT: nothing
# ERR: Kills running program if hash does not exist
#
commit_exists_or_abort() {
    git rev-parse --quiet --verify $1^{commit} 2>/dev/null >/dev/null || \
        die "Not a commit: $1"
}

ABBREV=0
INITONLY=0
LISTTREE=0
MSGTREE=0
GPGVERIF=0
DECORATE=0

while getopts "haIgVF:dt" opt
do
  case $opt in

    h)
        usage
        exit 0
        ;;

    a)
        ABBREV=1
        ;;

    I)
        INITONLY=1
        ;;

    g)
        LISTTREE=1
        ;;

    t)
        MSGTREE=1
        ;;

    V)
        GPGVERIF=1
        ;;

    F)
        FORMAT="$OPTARG"
        ;;

    d)
        DECORATE=1
        ;;

    *)
        echo -e "\n  Option does not exist : $opt\n"
        usage
        exit 1
        ;;

  esac
done
shift $(($OPTIND-1))

ISSUE="$1"
[[ -z "$ISSUE" ]] && die "No issue provided"
commit_exists_or_abort "$ISSUE"

# Build printing format
hashfmt="%H"
[[ $ABBREV -eq 1 ]] && hashfmt="%h"
FORMAT="%Cgreen$hashfmt%Creset%n"
FORMAT+="%C(yellow)Author:    %an <%ae> (%ai)%Creset%n"
FORMAT+="%C(yellow)Committed: %cn <%ce> (%ci)%Creset%n"
FORMAT+="%n%s%n%n%b%n"

if [[ $MSGTREE -eq 1 ]]; then
    HASHES=""
    for hash in $(git for-each-ref --contains "$ISSUE" | cut -d " " -f 1); do
        HASHES="$HASHES $hash"
    done

    hashfmt="%H"
    [[ $ABBREV   -eq 1 ]] && hashfmt="%h"

    # If the user wants to see the message tree, we use `git log` with some
    # fancy options and a nice format to print the message captions (with
    # color!)
    # and afterwards pipe the thing through `tac` to reverse its order (because
    # oldest-to-newest is how we want to see these things, isn't it?
    git log \
        --graph \
        --topo-order \
        --first-parent \
        --format=format:"%Cgreen$hashfmt%Creset %C(yellow)%an <%ae>%Creset: %s%n" \
        $HASHES \
        | tac | grep -v "|"
else

    if [[ $INITONLY -eq 1 ]]; then
        # if the user only wants to see the initial issue message

        hash=$(git dit find-tree-init-hash "$ISSUE")
        [[ $ABBREV -eq 1 ]] && abbrev="--abbrev-commit"
        git show $abbrev "$hash"
    else
        # if we shall show all the things...

        HASHES=""
        for hash in $(git for-each-ref --contains "$ISSUE" | cut -d " " -f 1); do
            HASHES="$HASHES $hash"
        done

        # Build arguments for `git log`
        args=""
        [[ $ABBREV   -eq 1 ]] && args="$args --abbrev-commit"
        [[ $LISTTREE -eq 1 ]] && args="$args --graph "
        [[ $GPGVERIF -eq 1 ]] && args="$args --show-signature "
        [[ $DECORATE -eq 1 ]] && args="$args --decorate "

        # Show the log with fancy options and in a colorish format.
        git log $args --topo-order --first-parent --format=format:"$FORMAT" $HASHES
    fi
fi
