#!/usr/bin/env sh
arbitrary_long_name==0 "exec" "awk" "-f" "$0" "$@"

#!/usr/bin/awk -f
#
#   git-dit - the distributed issue tracker for git
#   Copyright (C) 2016 Matthias Beyer <mail@beyermatthias.de>
#   Copyright (C) 2016 Julian Ganz <neither@nut.email>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License version 2 as
#   published by the Free Software Foundation.
#
# -----
#
# Extract trailers from stdin and write them to stdout.
#
# This tool detects blocks of trailers and writes all trailers detected to
# stdout, in the order they were discovered. A block of trailers is a series of
# non-blank lines of text, with each single line being a trailer.
#
# (c) 2016 Matthias Beyer, Julian Ganz

# helper to get the length of an array (posix compatibility)
function arraylen(array) {
    retval = 0
    for (i in array) ++retval;
    return retval;
}

# This script maintains an array `trailers` which is printed at the end of
# execution. In this array, trailers are accumulated. We use two indices
# `last_blankline` and `current` to mark an area of "accepted" trailers and an
# area of "staged" trailers.
# Trailers are first "staged" and "accepted" at the end of a block of trailers.
#

BEGIN {
    current = -1; # index of the current trailer
    last_blankline = -1; # index we had at the last blank line
    # state:
    #    1 indicates trailer
    #   -1 indicates paragraph
    #    0 indicates blank line
    is_trailer = 0;
}

# reset state, savepoint
#
# If we reached the end of either a paragraph or a block of trailers, we accept
# all trailers we collected up until now.
#
/^[[:space:]]*$/ {
    last_blankline = current;
    is_trailer = 0;
}

# detect and process trailers
#
# A trailer is a word identifying the trailer, followed by a colon, followed by
# the trailer's value. The value may span several lines. Each new line has,
# however, start with at least one space.
#
/^[^[:space:]]/ {
    # We either hid a new trailer or a regular line of text
    if (is_trailer > 0) {
        is_trailer = 0;
    }
}
/^[[:alnum:]-]+:[:space:]*.*$/ {
    # We supposedly hid the start of a trailer
    if (is_trailer >= 0) {
        current = arraylen(trailers);
        trailers[current] = $0;
        is_trailer = 1;
    }
}
/^[[:space:]]/ {
    # Looks like a trailer continuation
    if (is_trailer > 0) {
        sub(/[[:space:]]+/, "");
        trailers[current] = trailers[current] " " $0
    }
}

# paragraph detection
#
# If we see regular lines of text, we have to discard any staged trailers and
# Stop collecting new ones.
#
/^[^[:space:]]/ {
    if (is_trailer <= 0) {
        # we are in a paragraph
        is_trailer = -1;

        #remove all "trailers" which are actually part of a paragraph
        while (current > last_blankline) {
            delete trailers[current];
            --current;
        }
    }
}

# print all the trailers found
END {
    for (key in trailers)
        print trailers[key];
}
